<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>LB/HA高可用 on 茄子的养殖场</title>
        <link>https://proben1.github.io/tags/lb/ha%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
        <description>Recent content in LB/HA高可用 on 茄子的养殖场</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 25 Jun 2024 08:33:08 +0800</lastBuildDate><atom:link href="https://proben1.github.io/tags/lb/ha%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>LB/HA相关梳理</title>
        <link>https://proben1.github.io/2024/lb/ha%E7%9B%B8%E5%85%B3%E6%A2%B3%E7%90%86/</link>
        <pubDate>Tue, 25 Jun 2024 08:33:08 +0800</pubDate>
        
        <guid>https://proben1.github.io/2024/lb/ha%E7%9B%B8%E5%85%B3%E6%A2%B3%E7%90%86/</guid>
        <description>&lt;p&gt;High-Availability 高可用：通过设计减少系统不能提供服务的时间，简称有b计划&lt;/p&gt;
&lt;p&gt;High-Performance 高性能：快&lt;/p&gt;
&lt;h3 id=&#34;load-balancing-负载均衡&#34;&gt;load-balancing 负载均衡
&lt;/h3&gt;&lt;p&gt;1、大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间&lt;/p&gt;
&lt;p&gt;2、单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总&lt;/p&gt;
&lt;h3 id=&#34;active-active-双机互备&#34;&gt;Active-Active 双机互备
&lt;/h3&gt;&lt;p&gt;两台主机互为备份。主机各自运行不同应用，同时还相互监测对方状况。当任一台主机宕机时，另一台主机立即接管它的应用，以保证业务的不间断运行。&lt;/p&gt;
&lt;h3 id=&#34;active-standby-双机热备&#34;&gt;Active-Standby 双机热备
&lt;/h3&gt;&lt;p&gt;主服务器运行应用，备份服务器处于空闲状态，但实时监测主服务器的运行状态。一但主服务器出现异常或故障，备份服务器立刻接管主服务器的应用。&lt;/p&gt;
&lt;h3 id=&#34;cluster-群集&#34;&gt;Cluster 群集
&lt;/h3&gt;&lt;p&gt;多台主机一起工作，各自运行一个或几个服务。当某个主机发生故障时，运行在其上的服务就被其它主机接管。&lt;/p&gt;
&lt;h3 id=&#34;split-brain-脑裂&#34;&gt;split-brain 脑裂
&lt;/h3&gt;&lt;p&gt;在&amp;quot;双机热备&amp;quot;高可用（HA）系统中，当联系两个节点的&amp;quot;心跳线&amp;quot;断开时(即两个节点断开联系时)，本来为一个整体、动作协调的HA系统，就分裂成为两个独立的节点(即两个独立的个体)。由于相互失去了联系，都以为是对方出了故障，&amp;ldquo;本能&amp;quot;地争抢&amp;quot;共享资源&amp;rdquo;、争起&amp;quot;应用服务&amp;quot;。&lt;/p&gt;
&lt;p&gt;后果：1）或者共享资源被瓜分、两边&amp;quot;服务&amp;quot;都起不来了；2）或者两边&amp;quot;服务&amp;quot;都起来了，但同时读写&amp;quot;共享存储&amp;quot;，导致数据损坏（常见如数据库轮询着的联机日志出错）。&lt;/p&gt;
&lt;h3 id=&#34;反向代理&#34;&gt;反向代理
&lt;/h3&gt;&lt;p&gt;你通过一个服务器去访问外面叫代理，外面的数据通过一个服务器再访问你叫反向代理。&lt;/p&gt;
&lt;h3 id=&#34;q1在应用层面应用在两个主机上同时运行怎么保证应用之间的一致性&#34;&gt;Q1:在应用层面，应用在两个主机上同时运行，怎么保证应用之间的一致性?
&lt;/h3&gt;&lt;p&gt;模式1：两台主机上运行的应用是同一种，但是可以互不关联相互独立完成。只需要配置好负载均衡，保证提供高性能的服务即可。&lt;/p&gt;
&lt;p&gt;模式2：两台主机上运行的应用是相关联的，一台产生的结果会对另一台影响。通过消息日志，存储到本地数据库或共享的消息队列，再通过业务规则自动发起作用。反过来，对于两台主机都要写入的数据，通过锁的方式，保证只有一台在输出。&lt;/p&gt;
&lt;h3 id=&#34;q2在数据层面应用产生的数据怎么保证一致性&#34;&gt;Q2:在数据层面，应用产生的数据，怎么保证一致性?
&lt;/h3&gt;&lt;p&gt;节点层面：Oracle RAC（real application cluster）不同主机的 Oracle 实例节点同时访问同一个 Oracle 数据库，节点之间互相监控的运行状态，如果节点down掉，可以保证数据库实例仍然可用。而oracle 数据库所有的数据文件、联机日志文件、控制文件等均放在集群的共享存储设备上。
这里的节点是一个个不同的数据库主机。&lt;/p&gt;
&lt;p&gt;容灾层面：Data Guard。它是在主节点与备用节点间通过日志同步来保证数据的同步，可以实现数据库快速切换与灾难性恢复。这里的节点由是不同城市的机房组成。&lt;/p&gt;
&lt;h3 id=&#34;q3从ingress来看北向进来的业务请求怎么做到尽量平均分摊到aa集群里的不同节点上基于什么规则去进行分发&#34;&gt;Q3:从Ingress来看，北向进来的业务请求，怎么做到尽量平均分摊到AA集群里的不同节点上,基于什么规则去进行分发?
&lt;/h3&gt;&lt;p&gt;通过负载均衡。包含三个方面：&lt;/p&gt;
&lt;p&gt;软件（nginx、LVS）硬件（F5），&lt;/p&gt;
&lt;p&gt;网络层次（二层、四层、七层），&lt;/p&gt;
&lt;p&gt;本地（机房内）全局（地理位置）。&lt;/p&gt;
&lt;h3 id=&#34;负载均衡分类&#34;&gt;负载均衡分类
&lt;/h3&gt;&lt;h4 id=&#34;本地or全局&#34;&gt;本地or全局
&lt;/h4&gt;&lt;p&gt;本地（主机层面考虑）：&lt;/p&gt;
&lt;p&gt;权重、轮询、最小链接数等等……很多算法&lt;/p&gt;
&lt;p&gt;全局（地理层面考虑）：&lt;/p&gt;
&lt;p&gt;分配给响应时间最短的、最快域名解析的&lt;/p&gt;
&lt;h4 id=&#34;软件硬件分类&#34;&gt;软件硬件分类
&lt;/h4&gt;&lt;p&gt;F5：硬件负载均衡器&lt;/p&gt;
&lt;p&gt;lvs：重量级的四层负载软件&lt;/p&gt;
&lt;p&gt;nginx：轻量级七层均衡(也能做4层负载, 通过stream模块)&lt;/p&gt;
&lt;p&gt;haproxy：七层代理，也可以模拟四层转发&lt;/p&gt;
&lt;h4 id=&#34;网络层次分类&#34;&gt;网络层次分类
&lt;/h4&gt;&lt;p&gt;1）二层负载均衡（mac）
根据OSI模型分的二层负载，一般是用虚拟mac地址方式，外部对虚拟MAC地址请求，负载均衡接收后分配后端实际的MAC地址响应.
2）三层负载均衡（ip）
一般采用虚拟IP地址方式，外部对虚拟的ip地址请求，负载均衡接收后分配后端实际的IP地址响应. (即一个ip对一个ip的转发, 端口全放开)
3）四层负载均衡（tcp）
在三次负载均衡的基础上，即从第四层&amp;quot;传输层&amp;quot;开始, 使用&amp;quot;ip+port&amp;quot;接收请求，再转发到对应的机器。
4）七层负载均衡（http）
从第七层&amp;quot;应用层&amp;quot;开始, 根据虚拟的url或IP，主机名接收请求，再转向相应的处理服务器。&lt;/p&gt;
&lt;p&gt;二层：链路聚合&lt;/p&gt;
&lt;p&gt;四层：基于IP+端口的负载均衡&lt;/p&gt;
&lt;p&gt;在三层负载均衡的基础上，通过发布三层的IP地址（Virtual IP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。&lt;/p&gt;
&lt;p&gt;L4 switch，主要分析IP层及TCP/UDP层&lt;/p&gt;
&lt;p&gt;七层：基于虚拟的URL或主机IP的负载均衡&lt;/p&gt;
&lt;p&gt;在四层负载均衡的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征&lt;/p&gt;
&lt;p&gt;比如：不同业务交给不同服务器，假设用户访问高流量网站，在会话期间，它可能会请求静态内容（例如图像或视频）、动态内容（例如新闻订阅源）或者交易信息（例如订单状态）等等。7层负载平衡允许负载均衡器根据请求本身中的消息（如内容类型）来路由请求。可以将对图像或视频的请求路由到存储它的服务器；可以将诸如折扣价之类的交易信息请求路由到负责管理定价的应用服务器…&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
