<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>LB/HA高可用 on 茄子的养殖场</title>
        <link>https://proben1.github.io/tags/lb/ha%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
        <description>Recent content in LB/HA高可用 on 茄子的养殖场</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 27 Jun 2024 09:37:07 +0800</lastBuildDate><atom:link href="https://proben1.github.io/tags/lb/ha%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Keepalived&#43;Nginx部署实验</title>
        <link>https://proben1.github.io/2024/keepalived-nginx%E9%83%A8%E7%BD%B2%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Thu, 27 Jun 2024 09:37:07 +0800</pubDate>
        
        <guid>https://proben1.github.io/2024/keepalived-nginx%E9%83%A8%E7%BD%B2%E5%AE%9E%E9%AA%8C/</guid>
        <description>&lt;h3 id=&#34;keepalived简介&#34;&gt;Keepalived简介
&lt;/h3&gt;&lt;p&gt;一个免费开源的轻量级别高可用解决方案，通过VRRP协议实现多台机器之间的故障转移服务。&lt;/p&gt;
&lt;h3 id=&#34;规划方案&#34;&gt;规划方案
&lt;/h3&gt;&lt;p&gt;master ：192.168.137.6&lt;/p&gt;
&lt;p&gt;backup ：192.168.10.8&lt;/p&gt;
&lt;p&gt;vip ：192.168.10.11&lt;/p&gt;
&lt;p&gt;OS：CentOS Linux 7 (Core)&lt;/p&gt;
&lt;p&gt;网卡名都是ens34&lt;/p&gt;
&lt;p&gt;实现：vip 上跑一个Nginx服务&lt;/p&gt;
&lt;p&gt;思路：安装+配置+脚本+启动排错+验证&lt;/p&gt;
&lt;h3 id=&#34;环境安装&#34;&gt;环境安装
&lt;/h3&gt;&lt;p&gt;sudo yum -y install nginx&lt;/p&gt;
&lt;p&gt;sudo yum -y install keepalive&lt;/p&gt;
&lt;p&gt;主程序文件：/usr/sbin/keepalived.conf&lt;/p&gt;
&lt;p&gt;主配置文件：/usr/sbin/keepalived.conf&lt;/p&gt;
&lt;h3 id=&#34;服务配置&#34;&gt;服务配置
&lt;/h3&gt;&lt;p&gt;master 和backup区别：配置中的state和priority不一样&lt;/p&gt;
&lt;p&gt;master ：&lt;code&gt;vi /usr/sbin/keepalived.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state MASTER
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    interface ens34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    virtual_router_id 51
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority 100
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    advert_int 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    authentication {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth_pass 1111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        192.168.137.11/24 dev ens34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    preempt delay 60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vrrp_script chk_nginx_port {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	script &amp;#34;/opt/chk_nginx.sh&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	interval 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	weight -5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fall 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	rise 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;backup：vi /usr/sbin/keepalived.conf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vrrp_instance VI_1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state BACKUP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    interface ens34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    virtual_router_id 51
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority 80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    advert_int 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    authentication {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth_type PASS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth_pass 1111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    virtual_ipaddress {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        192.168.137.11/24 dev ens34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    preempt delay 60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vrrp_script chk_nginx_port {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	script &amp;#34;/opt/chk_nginx.sh&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	interval 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	weight -5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fall 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	rise 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;脚本配置&#34;&gt;脚本配置
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vi /opt/chk_nginx.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#检测nginx是否启动了&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;A&lt;/span&gt;=&lt;span style=&#34;color:#2aa198&#34;&gt;`&lt;/span&gt;ps -C nginx --no-header |wc -l&lt;span style=&#34;color:#2aa198&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#如果nginx没有启动就启动nginx &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#268bd2&#34;&gt;$A&lt;/span&gt; -eq &lt;span style=&#34;color:#2aa198;font-weight:bold&#34;&gt;0&lt;/span&gt; ];&lt;span style=&#34;color:#859900&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#重启nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#systemctl start nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;#nginx重启失败，则停掉keepalived服务，进行VIP转移&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#859900&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#2aa198&#34;&gt;`&lt;/span&gt;ps -C nginx --no-header |wc -l&lt;span style=&#34;color:#2aa198&#34;&gt;`&lt;/span&gt; -eq &lt;span style=&#34;color:#2aa198;font-weight:bold&#34;&gt;0&lt;/span&gt; ];&lt;span style=&#34;color:#859900&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           killall keepalived
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#859900&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#859900&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;赋权：&lt;code&gt;chmod 775 /opt/chk_nginx.sh&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动排错&#34;&gt;启动排错
&lt;/h3&gt;&lt;p&gt;systemctl start nginx&lt;/p&gt;
&lt;p&gt;systemctl start keepalived&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;ip a&lt;/code&gt;可以发现vip没有启动&lt;/p&gt;
&lt;p&gt;systemctl status keepalived 查看状态，发现很多中文的空格未识别，修改配置文件，删去空格，重试&lt;/p&gt;
&lt;p&gt;systemctl restart keepalived&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;ip a&lt;/code&gt;可以发现vip已经启动&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://pic.imgdb.cn/item/667cce87d9c307b7e9cf73f4.png&#34; &gt;
		&lt;img src=&#34;https://pic.imgdb.cn/item/667cce87d9c307b7e9cf73f4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;验证&#34;&gt;验证
&lt;/h3&gt;&lt;p&gt;通过ip&lt;code&gt;192.168.137.11&lt;/code&gt;可以看到nginx欢迎界面，我们在主备上修改这个界面&lt;/p&gt;
&lt;p&gt;&lt;code&gt; vi /usr/share/nginx/html/index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;分别在&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;后加上111和222&lt;/p&gt;
&lt;p&gt;访问192.168.137.11可以看到111&lt;/p&gt;
&lt;p&gt;systemctl stop keepalived关闭主机1的keepalived服务&lt;/p&gt;
&lt;p&gt;再次访问192.168.137.11可以看到222&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://pic.imgdb.cn/item/667cd01fd9c307b7e9d1e3d5.png&#34; &gt;
		&lt;img src=&#34;https://pic.imgdb.cn/item/667cd01fd9c307b7e9d1e3d5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重新开启&lt;/p&gt;
&lt;p&gt;变回111&lt;/p&gt;
&lt;p&gt;验证成功&lt;/p&gt;
</description>
        </item>
        <item>
        <title>LB/HA相关梳理</title>
        <link>https://proben1.github.io/2024/lb/ha%E7%9B%B8%E5%85%B3%E6%A2%B3%E7%90%86/</link>
        <pubDate>Tue, 25 Jun 2024 08:33:08 +0800</pubDate>
        
        <guid>https://proben1.github.io/2024/lb/ha%E7%9B%B8%E5%85%B3%E6%A2%B3%E7%90%86/</guid>
        <description>&lt;p&gt;High-Availability 高可用：通过设计减少系统不能提供服务的时间，简称有b计划&lt;/p&gt;
&lt;p&gt;High-Performance 高性能：快&lt;/p&gt;
&lt;h3 id=&#34;active-standby-双机热备&#34;&gt;Active-Standby 双机热备
&lt;/h3&gt;&lt;p&gt;主服务器运行应用，备份服务器处于空闲状态，但实时监测主服务器的运行状态。一但主服务器出现异常或故障，备份服务器立刻接管主服务器的应用。&lt;/p&gt;
&lt;h3 id=&#34;active-active-双机互备&#34;&gt;Active-Active 双机互备
&lt;/h3&gt;&lt;p&gt;两台服务器均为工作机，均为应用系统提供支持，同时还相互监测对方状况。当任一台主机宕机时，另一台主机主动接管异常机的应用，以保证业务的不间断运行（虽然加大了正常运行主机的负载）。最常见的例子：网站服务器&lt;/p&gt;
&lt;h3 id=&#34;load-balancing-负载均衡&#34;&gt;load-balancing 负载均衡
&lt;/h3&gt;&lt;p&gt;1、大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间&lt;/p&gt;
&lt;p&gt;2、单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总&lt;/p&gt;
&lt;p&gt;Load-Balance就是Active Active的一种&lt;/p&gt;
&lt;h3 id=&#34;cluster-群集&#34;&gt;Cluster 群集
&lt;/h3&gt;&lt;p&gt;多台主机一起工作，各自运行一个或几个服务。当某个主机发生故障时，运行在其上的服务就被其它主机接管。&lt;/p&gt;
&lt;h3 id=&#34;split-brain-脑裂&#34;&gt;split-brain 脑裂
&lt;/h3&gt;&lt;p&gt;在&amp;quot;双机热备&amp;quot;高可用（HA）系统中，当联系两个节点的&amp;quot;心跳线&amp;quot;断开时(即两个节点断开联系时)，本来为一个整体、动作协调的HA系统，就分裂成为两个独立的节点(即两个独立的个体)。由于相互失去了联系，都以为是对方出了故障，&amp;ldquo;本能&amp;quot;地争抢&amp;quot;共享资源&amp;rdquo;、争起&amp;quot;应用服务&amp;quot;。&lt;/p&gt;
&lt;p&gt;后果：1）或者共享资源被瓜分、两边&amp;quot;服务&amp;quot;都起不来了；2）或者两边&amp;quot;服务&amp;quot;都起来了，但同时读写&amp;quot;共享存储&amp;quot;，导致数据损坏（常见如数据库轮询着的联机日志出错）。&lt;/p&gt;
&lt;h3 id=&#34;反向代理&#34;&gt;反向代理
&lt;/h3&gt;&lt;p&gt;你通过一个服务器去访问外面叫代理，那么外面的数据通过一个服务器再访问你就叫反向代理。&lt;/p&gt;
&lt;p&gt;反向代理（reverse proxy）是指用代理服务器来接受外部的访问请求，然后将请求转发给内网的上游服务器，并将从上游服务器上得到的结果返回外部客户端。作为反向代理是 Nginx 的一种常见用法。这里的负载均衡是指一种策略，争取把请求平均地分布到每一台上游服务器上。&lt;/p&gt;
&lt;h3 id=&#34;q1在应用层面应用在两个主机上同时运行怎么保证应用之间的一致性&#34;&gt;Q1:在应用层面，应用在两个主机上同时运行，怎么保证应用之间的一致性?
&lt;/h3&gt;&lt;p&gt;模式1：两台主机上运行的应用是同一种，但是可以互不关联相互独立完成。只需要配置好负载均衡，保证提供高性能的服务即可。&lt;/p&gt;
&lt;p&gt;模式2：两台主机上运行的应用是相关联的，一台产生的结果会对另一台影响。通过消息日志，存储到本地数据库或共享的消息队列，再通过业务规则自动发起作用。反过来，对于两台主机都要写入的数据，通过锁的方式，保证只有一台在输出。&lt;/p&gt;
&lt;h3 id=&#34;q2在数据层面应用产生的数据怎么保证一致性&#34;&gt;Q2:在数据层面，应用产生的数据，怎么保证一致性?
&lt;/h3&gt;&lt;p&gt;节点层面：Oracle RAC（Real Application Clusters）是Oracle数据库提供的一种数据库集群技术，专门用于实现数据库的高可用性和可扩展性。RAC允许多个数据库实例运行在不同的服务器上，共享访问相同的数据库文件，通过缓存融合（Cache Fusion）技术实现数据的一致性。RAC提供了连接负载均衡（Connection Balancing）和基于服务的负载均衡（Service-Based Load Balancing）两种方式来分散负载&lt;/p&gt;
&lt;p&gt;容灾层面：Data Guard。它是在主节点与备用节点间通过日志同步来保证数据的同步，可以实现数据库快速切换与灾难性恢复。这里的节点由是不同城市的机房组成。&lt;/p&gt;
&lt;h3 id=&#34;q3从ingress来看北向进来的业务请求怎么做到尽量平均分摊到aa集群里的不同节点上基于什么规则去进行分发&#34;&gt;Q3:从Ingress来看，北向进来的业务请求，怎么做到尽量平均分摊到AA集群里的不同节点上,基于什么规则去进行分发?
&lt;/h3&gt;&lt;p&gt;通过负载均衡。包含三个方面：&lt;/p&gt;
&lt;p&gt;软件（nginx、LVS）硬件（F5），&lt;/p&gt;
&lt;p&gt;网络层次（二层、四层、七层），&lt;/p&gt;
&lt;p&gt;本地（机房内）全局（地理位置）。&lt;/p&gt;
&lt;h3 id=&#34;负载均衡分类&#34;&gt;负载均衡分类
&lt;/h3&gt;&lt;h4 id=&#34;本地or全局&#34;&gt;本地or全局
&lt;/h4&gt;&lt;p&gt;本地（主机层面考虑）：&lt;/p&gt;
&lt;p&gt;微观层面上的负载均衡算法：权重、轮询、最小链接数等等……很多&lt;/p&gt;
&lt;p&gt;全局（地理层面考虑）：&lt;/p&gt;
&lt;p&gt;全球某个地方发来的请求，分配给响应时间最短的、最快域名解析的机房里的服务器&lt;/p&gt;
&lt;h4 id=&#34;软件硬件分类&#34;&gt;软件硬件分类
&lt;/h4&gt;&lt;p&gt;F5：硬件负载均衡器&lt;/p&gt;
&lt;p&gt;lvs：重量级的四层负载软件&lt;/p&gt;
&lt;p&gt;nginx：轻量级七层均衡(也能做4层负载, 通过stream模块)&lt;/p&gt;
&lt;p&gt;haproxy：七层代理，也可以模拟四层转发&lt;/p&gt;
&lt;h4 id=&#34;网络层次分类&#34;&gt;网络层次分类
&lt;/h4&gt;&lt;p&gt;&lt;kbd&gt;二层负载均衡（mac）&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;根据OSI模型分的二层负载，一般是用虚拟mac地址方式，外部对虚拟MAC地址请求，负载均衡接收后分配后端实际的MAC地址响应.&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;三层负载均衡（ip）&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;一般采用虚拟IP地址方式，外部对虚拟的ip地址请求，负载均衡接收后分配后端实际的IP地址响应. (即一个ip对一个ip的转发, 端口全放开)&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;四层负载均衡（tcp）&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;在三次负载均衡的基础上，即从第四层&amp;quot;传输层&amp;quot;开始, 使用&amp;quot;ip+port&amp;quot;接收请求，再转发到对应的机器。&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;七层负载均衡（http）&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;从第七层&amp;quot;应用层&amp;quot;开始, 根据虚拟的url或IP，主机名接收请求，再转向相应的处理服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二层&lt;/strong&gt;：链路聚合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四层&lt;/strong&gt;：基于IP+端口的负载均衡&lt;/p&gt;
&lt;p&gt;在三层负载均衡的基础上，通过发布三层的IP地址（Virtual IP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。
L4 switch，主要分析IP层及TCP/UDP层&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;七层&lt;/strong&gt;：基于虚拟的URL或主机IP的负载均衡&lt;/p&gt;
&lt;p&gt;在四层负载均衡的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征。比如：不同业务交给不同服务器，假设用户访问高流量网站，在会话期间，它可能会请求静态内容（例如图像或视频）、动态内容（例如新闻订阅源）或者交易信息（例如订单状态）等等。7层负载平衡允许负载均衡器根据请求本身中的消息（如内容类型）来路由请求。可以将对图像或视频的请求路由到存储它的服务器；可以将诸如折扣价之类的交易信息请求路由到负责管理定价的应用服务器…&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
